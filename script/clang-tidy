#!/usr/bin/env python3

import argparse
import json
import multiprocessing
import os
import queue
import re
import shutil
import subprocess
import sys
import tempfile
import threading

import click
import pexpect

sys.path.append(os.path.dirname(__file__))
from helpers import shlex_quote, get_output, filter_grep, \
    build_all_include, temp_header_file, git_ls_files, filter_changed, load_idedata, basepath


def clang_options(idedata, env_name: str):
    cmd = [
        # target 32-bit arch (this prevents size mismatch errors on a 64-bit host)
        '-m32',
        # disable built-in include directories from the host
        '-nostdinc',
        '-nostdinc++',
        # replace pgmspace.h, as it uses GNU extensions clang doesn't support
        # https://github.com/earlephilhower/newlib-xtensa/pull/18
        '-D_PGMSPACE_H_',
        '-Dpgm_read_byte(s)=(*(const uint8_t *)(s))',
        '-Dpgm_read_byte_near(s)=(*(const uint8_t *)(s))',
        '-Dpgm_read_dword(s)=(*(const uint32_t *)(s))',
        '-DPROGMEM=',
        '-DPGM_P=const char *',
        '-DPSTR(s)=(s)',
        # this next one is also needed with upstream pgmspace.h
        # suppress warning about identifier naming in expansion of this macro
        '-DPSTRN(s, n)=(s)',
        # suppress warning about attribute cannot be applied to type
        # https://github.com/esp8266/Arduino/pull/8258
        '-Ddeprecated(x)=',
        # allow to condition code on the presence of clang-tidy
        '-DCLANG_TIDY',
        # (esp-idf) Fix __once_callable in some libstdc++ headers
        '-D_GLIBCXX_HAVE_TLS',
    ]

    defines = idedata["defines"]

    if 'c3' not in env_name:
        cmd += [
            # pretend we're an Xtensa compiler, which gates some features in the headers
            '-D__XTENSA__',
            # (esp-idf) Disable this header because they use asm with registers clang-tidy doesn't know
            '-D__XTENSA_API_H__',
        ]
    else:
        cmd += [
            "-D_GLIBCXX_GCC_GTHR_POSIX_H",
            "-D__gthread_mutex_lock(a)=0",
            "-D__gthread_recursive_mutex_unlock(a)=0",
            "-D__gthread_recursive_mutex_trylock(a)=0",
            "-D__gthread_recursive_mutex_destroy(a)=0",
            "-D__gthread_recursive_mutex_lock(a)=0",
            "-D__gthread_recursive_mutex_timedlock(a,b)=0",
            "-D__gthread_recursive_mutex_t=int",
            "-D__gthread_mutex_t=int",
            "-D__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(a)=0",
            "-D__GTHREAD_MUTEX_INIT_FUNCTION(a)=0",
            "-D__gthread_mutex_destroy(a)=0",
            "-D__gthread_mutex_trylock(a)=0",
            "-D__gthread_mutex_unlock(a)=0",
            "-D__gthread_mutex_timedlock(a,b)=0",
            "-D__gthread_time_t=struct timespec",
            "-D__gthread_once_t=int",
            "-D__gthread_once(a,b)=0",
            "-D__GTHREAD_ONCE_INIT=0",
        ]

    # copy compiler flags, except those clang doesn't understand.
    cmd.extend(flag for flag in idedata['cxx_flags'].split(' ')
               if flag not in ('-free', '-fipa-pta', '-fstrict-volatile-bitfields',
                               '-mlongcalls', '-mtext-section-literals',
                               '-mfix-esp32-psram-cache-issue', '-mfix-esp32-psram-cache-strategy=memw',
                               '-march=rv32imc'))

    # defines
    cmd.extend(f'-D{define}' for define in defines)

    # add include directories, using -isystem for dependencies to suppress their errors
    system_includes = idedata['includes']['toolchain']

    # if esp32s2 or esp32c3 were installed on the computer at _any_ time
    # the toolchain includes will contain the headers, even if the env
    # is not based on those chips
    variant_toolchains = {
        "USE_ESP32_VARIANT_ESP32": "toolchain-xtensa32",
        "USE_ESP32_VARIANT_ESP32S2": "toolchain-xtensa32s2",
        "USE_ESP32_VARIANT_ESP32C3": "toolchain-riscv-esp",
    }
    for variant_define in variant_toolchains:
        if variant_define not in defines:
            continue
        # Filter out the other toolchains
        for var, toolchain in variant_toolchains.items():
            if var == variant_define:
                continue
            # Try to match directories like
            # ~/.platformio/packages/toolchain-xtensa32@2.50200.97/...
            # or ~/.platformio/packages/toolchain-xtensa32/...
            # or with windows backslash paths
            pattern = r".*[/\\]{}[/\\@].*".format(toolchain)
            system_includes = [
                inc for inc in system_includes
                if re.match(pattern, inc) is None
            ]

    for inc in system_includes:
        cmd.extend(['-isystem', inc])

    for directory in sorted(set(idedata['includes']['build'])):
        dependency = any(x in directory for x in [
            "framework-arduino",
            "framework-espidf",
            "/libdeps/",
            "\\libdeps\\",
            # globally installed libs
            "/.platformio/lib/",
            "\\.platformio\\lib\\",
        ]) or directory.endswith("config")
        cmd.extend(['-isystem' if dependency else '-I', directory])

    return cmd


def run_tidy(args, options, tmpdir, queue, lock, failed_files):
    while True:
        path = queue.get()
        invocation = ['clang-tidy-11']

        if tmpdir is not None:
            invocation.append('--export-fixes')
            # Get a temporary file. We immediately close the handle so clang-tidy can
            # overwrite it.
            (handle, name) = tempfile.mkstemp(suffix='.yaml', dir=tmpdir)
            os.close(handle)
            invocation.append(name)

        if args.quiet:
            invocation.append('-quiet')

        invocation.append(os.path.abspath(path))
        invocation.append(f"--header-filter={os.path.abspath(basepath)}/.*")
        invocation.append('--')
        invocation.extend(options)
        invocation_s = ' '.join(shlex_quote(x) for x in invocation)

        # Use pexpect for a pseudy-TTY with colored output
        output, rc = pexpect.run(invocation_s, withexitstatus=True, encoding='utf-8',
                                 timeout=15 * 60)
        if rc != 0:
            with lock:
                print()
                print("\033[0;32m************* File \033[1;32m{}\033[0m".format(path))
                print(output)
                print()
                failed_files.append(path)
        queue.task_done()


def progress_bar_show(value):
    if value is None:
        return ''


def split_list(a, n):
    k, m = divmod(len(a), n)
    return [a[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n)]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-j', '--jobs', type=int,
                        default=multiprocessing.cpu_count(),
                        help='number of tidy instances to be run in parallel.')
    parser.add_argument('-e', '--environment', default='esp32-tidy',
                        help='the PlatformIO environment to run against (esp8266-tidy or esp32-tidy)')
    parser.add_argument('files', nargs='*', default=[],
                        help='files to be processed (regex on path)')
    parser.add_argument('--fix', action='store_true', help='apply fix-its')
    parser.add_argument('-q', '--quiet', action='store_false',
                        help='run clang-tidy in quiet mode')
    parser.add_argument('-c', '--changed', action='store_true',
                        help='only run on changed files')
    parser.add_argument('-g', '--grep', help='only run on files containing value')
    parser.add_argument('--split-num', type=int, help='split the files into X jobs.',
                        default=None)
    parser.add_argument('--split-at', type=int, help='which split is this? starts at 1',
                        default=None)
    parser.add_argument('--all-headers', action='store_true',
                        help='create a dummy file that checks all headers')
    args = parser.parse_args()

    try:
        get_output('clang-tidy-11', '-version')
    except:
        print("""
        Oops. It looks like clang-tidy-11 is not installed.

        Please check you can run "clang-tidy-11 -version" in your terminal and install
        clang-tidy (v11) if necessary.

        Note you can also upload your code as a pull request on GitHub and see the CI check
        output to apply clang-tidy.
        """)
        return 1

    idedata = load_idedata(args.environment)
    options = clang_options(idedata, args.environment)

    files = []
    for path in git_ls_files(['*.cpp']):
        files.append(os.path.relpath(path, os.getcwd()))

    if args.files:
        # Match against files specified on command-line
        file_name_re = re.compile('|'.join(args.files))
        files = [p for p in files if file_name_re.search(p)]

    if args.changed:
        files = filter_changed(files)

    if args.grep:
        files = filter_grep(files, args.grep)

    files.sort()

    if args.split_num:
        files = split_list(files, args.split_num)[args.split_at - 1]

    if args.all_headers and args.split_at in (None, 1):
        build_all_include()
        files.insert(0, temp_header_file)

    tmpdir = None
    if args.fix:
        tmpdir = tempfile.mkdtemp()

    failed_files = []
    try:
        task_queue = queue.Queue(args.jobs)
        lock = threading.Lock()
        for _ in range(args.jobs):
            t = threading.Thread(target=run_tidy,
                                 args=(args, options, tmpdir, task_queue, lock, failed_files))
            t.daemon = True
            t.start()

        # Fill the queue with files.
        with click.progressbar(files, width=30, file=sys.stderr,
                               item_show_func=progress_bar_show) as bar:
            for name in bar:
                task_queue.put(name)

        # Wait for all threads to be done.
        task_queue.join()

    except KeyboardInterrupt:
        print()
        print('Ctrl-C detected, goodbye.')
        if tmpdir:
            shutil.rmtree(tmpdir)
        os.kill(0, 9)

    if args.fix and failed_files:
        print('Applying fixes ...')
        try:
            subprocess.call(['clang-apply-replacements-11', tmpdir])
        except:
            print('Error applying fixes.\n', file=sys.stderr)
            raise

    sys.exit(len(failed_files))


if __name__ == '__main__':
    main()
